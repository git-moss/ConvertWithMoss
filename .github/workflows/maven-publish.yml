name: Build and publish jpackage result to GitHub

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:

  createmanual:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create output folder
        run: mkdir output
      
      - name: Convert MD files to PDF
        uses: docker://pandoc/latex:2.9
        with:
          args: --standalone --toc -V geometry:margin=2.5cm --number-sections --output=output/ConvertWithMoss-Manual.pdf documentation/README.md documentation/README-FORMATS.md documentation/CHANGELOG.md
      
      - name: Publish result
        uses: actions/upload-artifact@v4
        with:
          name: ConvertWithMoss-Installers-Manual
          path: output/ConvertWithMoss-Manual.pdf


  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: convertwithmoss*.deb
            build_name: linux
          - os: windows-latest
            artifact_name: ConvertWithMoss*.msi
            build_name: win
          - os: macos-latest
            artifact_name: ConvertWithMoss*.dmg
            build_name: mac-universal

    name: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 25

      # -----------------------------
      # Linux / Windows build steps
      # -----------------------------
      - name: Build and jpackage with Maven (Linux/Windows)
        if: ${{ matrix.os != 'macos-latest' }}
        run: mvn -B package jpackage::jpackage@${{ matrix.build_name }} --file pom.xml

      # -----------------------------
      # macOS universal build
      # -----------------------------
      - name: Install Rosetta
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          softwareupdate --install-rosetta --agree-to-license

      - name: Download and extract JDK 25 (ARM + Intel)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          set -e
          mkdir -p /Users/runner/jdks

          echo "Downloading macOS ARM JDK 25..."
          curl -L --fail -o /Users/runner/jdks/jdk-25-macos-aarch64.tar.gz \
            https://download.oracle.com/java/25/latest/jdk-25_macos-aarch64_bin.tar.gz

          echo "Downloading macOS Intel JDK 25..."
          curl -L --fail -o /Users/runner/jdks/jdk-25-macos-x64.tar.gz \
            https://download.oracle.com/java/25/latest/jdk-25_macos-x64_bin.tar.gz

          echo "Extracting JDKs..."
          cd /Users/runner/jdks

          mkdir -p jdk-arm jdk-x64
          tar -xzf jdk-25-macos-aarch64.tar.gz
          tar -xzf jdk-25-macos-x64.tar.gz

          # Dynamically detect extracted directories
          ARM_DIR=$(tar -tzf jdk-25-macos-aarch64.tar.gz | head -1 | cut -f1 -d"/")
          X64_DIR=$(tar -tzf jdk-25-macos-x64.tar.gz | head -1 | cut -f1 -d"/")

          mv "$ARM_DIR"/* jdk-arm/
          mv "$X64_DIR"/* jdk-x64/

          echo "Verifying JDKs:"
          /Users/runner/jdks/jdk-arm/bin/java --version
          arch -x86_64 /Users/runner/jdks/jdk-x64/bin/java --version

      - name: Set JAVA_HOME for ARM
        if: ${{ matrix.os == 'macos-latest' }}
        run: echo "JAVA_HOME=/Users/runner/jdks/jdk-arm" >> $GITHUB_ENV

      - name: Build ARM app
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          export PATH=$JAVA_HOME/bin:$PATH
          java -version
          mvn -B package jpackage::jpackage@mac-arm --file pom.xml

      - name: Set JAVA_HOME for Intel
        if: ${{ matrix.os == 'macos-latest' }}
        run: echo "JAVA_HOME=/Users/runner/jdks/jdk-x64" >> $GITHUB_ENV

      - name: Build Intel app (under Rosetta)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          export PATH=$JAVA_HOME/bin:$PATH
          arch -x86_64 java -version
          arch -x86_64 mvn -B package jpackage::jpackage@mac-intel --file pom.xml

      # -----------------------------
      # Combine ARM + Intel -> Universal
      # -----------------------------
      - name: Combine ARM + Intel binaries
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          mkdir -p target/release/build-universal/ConvertWithMoss.app/Contents/MacOS
          cp -R target/release/mac-arm/ConvertWithMoss.app/Contents target/release/build-universal/ConvertWithMoss.app/Contents
          lipo -create \
            target/release/mac-arm/ConvertWithMoss.app/Contents/MacOS/ConvertWithMoss \
            target/release/mac-intel/ConvertWithMoss.app/Contents/MacOS/ConvertWithMoss \
            -output target/release/build-universal/ConvertWithMoss.app/Contents/MacOS/ConvertWithMoss

      - name: Create Universal DMG
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          /Users/runner/jdks/jdk-arm/bin/jpackage \
            --type dmg \
            --name ConvertWithMoss \
            --app-version 1.0.0 \
            --dest target/release \
            --app-image target/release/build-universal/ConvertWithMoss.app \
            --icon icons/app.icns

      - name: Publish jpackage result
        uses: actions/upload-artifact@v4
        with:
          name: ConvertWithMoss-Installers-${{ matrix.os }}
          path: target/release/${{ matrix.artifact_name }}

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ConvertWithMoss-Installers
          pattern: ConvertWithMoss-Installers-*
          separate-directories: true
