name: Build and publish jpackage result to GitHub

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:

  createmanual:
    runs-on: ubuntu-latest
    steps:
      - name: Configure
        uses: actions/checkout@v4
        
      - name: Create output folder
        run: mkdir output
      
      - name: Convert MD files to PDF
        uses: docker://pandoc/latex:2.9
        with:
          args: --standalone --toc -V geometry:margin=2.5cm --number-sections --output=output/ConvertWithMoss-Manual.pdf documentation/README.md documentation/README-FORMATS.md documentation/CHANGELOG.md
      
      - name: Publish result
        uses: actions/upload-artifact@v4
        with:
          name: ConvertWithMoss-Installers-Manual
          path: output/ConvertWithMoss-Manual.pdf

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: convertwithmoss*.deb
            build_name: linux
          - os: windows-latest
            artifact_name: ConvertWithMoss*.msi
            build_name: win
          - os: macos-latest
            artifact_name: ConvertWithMoss*.dmg
            build_name: mac-universal

    name: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 25

    - name: Build and jpackage with Maven (Linux/Windows)
      if: ${{ matrix.os != 'macos-latest' }}
      run: mvn -B package jpackage::jpackage@${{ matrix.build_name }} --file pom.xml

    # -------------------------------------------------------
    # macOS universal build (replaces mac-arm and mac-intel)
    # -------------------------------------------------------
    - name: Install Rosetta
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        softwareupdate --install-rosetta --agree-to-license

    - name: Download JDK 25 (ARM + Intel)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        set -e
        mkdir -p /Users/runner/jdks

        echo "Downloading macOS AArch64 JDK 25..."
        curl -L --fail -o /Users/runner/jdks/jdk-25-macos-aarch64.tar.gz \
          https://download.oracle.com/java/25/latest/jdk-25_macos-aarch64_bin.tar.gz

        echo "Downloading macOS x64 JDK 25..."
        curl -L --fail -o /Users/runner/jdks/jdk-25-macos-x64.tar.gz \
          https://download.oracle.com/java/25/latest/jdk-25_macos-x64_bin.tar.gz

        echo "Checking file types (should be gzip/tar)..."
        file /Users/runner/jdks/jdk-25-macos-aarch64.tar.gz
        file /Users/runner/jdks/jdk-25-macos-x64.tar.gz

        echo "Extracting JDKs..."
        mkdir -p /Users/runner/jdks/jdk-arm /Users/runner/jdks/jdk-x64
        tar -xzf /Users/runner/jdks/jdk-25-macos-aarch64.tar.gz -C /Users/runner/jdks/jdk-arm --strip-components=1
        tar -xzf /Users/runner/jdks/jdk-25-macos-x64.tar.gz -C /Users/runner/jdks/jdk-x64 --strip-components=1

        echo "Quick version checks:"
        /Users/runner/jdks/jdk-arm/bin/java --version || true
        arch -x86_64 /Users/runner/jdks/jdk-x64/bin/java --version || true

    - name: Set JAVA_HOME for ARM build
      if: ${{ matrix.os == 'macos-latest' }}
      run: echo "JAVA_HOME=/Users/runner/jdks/jdk-arm" >> $GITHUB_ENV

    - name: Build ARM app
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        export JAVA_HOME=/Users/runner/jdks/jdk-arm
        export PATH=$JAVA_HOME/bin:$PATH
        mvn -B package jpackage::jpackage@mac-arm --file pom.xml

    - name: Set JAVA_HOME for Intel build
      if: ${{ matrix.os == 'macos-latest' }}
      run: echo "JAVA_HOME=/Users/runner/jdks/jdk-x64" >> $GITHUB_ENV

    - name: Build Intel app (under Rosetta)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        export JAVA_HOME=/Users/runner/jdks/jdk-x64
        export PATH=$JAVA_HOME/bin:$PATH
        arch -x86_64 mvn -B package jpackage::jpackage@mac-intel --file pom.xml

    - name: Combine ARM + Intel binaries
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        mkdir -p target/release/build-universal/ConvertWithMoss.app/Contents/MacOS
        cp -R target/release/mac-arm/ConvertWithMoss.app/Contents target/release/build-universal/ConvertWithMoss.app/Contents
        lipo -create \
          target/release/mac-arm/ConvertWithMoss.app/Contents/MacOS/ConvertWithMoss \
          target/release/mac-intel/ConvertWithMoss.app/Contents/MacOS/ConvertWithMoss \
          -output target/release/build-universal/ConvertWithMoss.app/Contents/MacOS/ConvertWithMoss

    - name: Create Universal DMG
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        /Users/runner/jdks/jdk-arm/bin/jpackage \
          --type dmg \
          --name ConvertWithMoss \
          --app-version 1.0.0 \
          --dest target/release \
          --app-image target/release/build-universal/ConvertWithMoss.app \
          --icon icons/app.icns

    - name: Publish jpackage result
      uses: actions/upload-artifact@v4
      with:
        name: ConvertWithMoss-Installers-${{ matrix.os }}
        path: target/release/${{ matrix.artifact_name }}

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Merge Artifacts
      uses: actions/upload-artifact/merge@v4
      with:
        name: ConvertWithMoss-Installers
        pattern: ConvertWithMoss-Installers-*
        separate-directories: true
